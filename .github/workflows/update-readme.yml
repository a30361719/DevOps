name: Update README Activity

on:
  workflow_dispatch: {}          # 手動觸發（從 UI 選分支即可）
  # 如要定期執行可解開：
  # schedule:
  #   - cron: "0 */6 * * *"      # 每 6 小時跑一次

permissions:
  contents: write                # 最小必要權限
  pull-requests: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 跑在哪個分支就 checkout 那個分支（手動觸發時會用 UI 選擇）
          ref: ${{ github.ref_name }}
          persist-credentials: false

      # 產生最近活動（最近合併 PR + 最近 commits），輸出為 steps.gen.outputs.content
      - name: Generate recent activity
        id: gen
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const per = 5;

            // 最近合併的 PR
            const prs = await github.rest.pulls.list({
              owner, repo, state: 'closed', per_page: 20, sort: 'updated', direction: 'desc'
            });
            const merged = prs.data.filter(p => p.merged_at).slice(0, per);

            // 最近 commits
            const commits = await github.rest.repos.listCommits({ owner, repo, per_page: per });

            function d(s){ return new Date(s).toISOString().slice(0,10); }
            const prLines = merged.map(p => `- Merged PR [#${p.number} ${p.title}](${p.html_url}) on ${d(p.merged_at)}`);
            const commitLines = commits.data.map(c => `- ${c.sha.slice(0,7)} ${c.commit.message.split('\n')[0]} (${d(c.commit.author.date)})`);

            const md = [
              '### Recent Merged PRs',
              ...prLines,
              '',
              '### Recent Commits',
              ...commitLines
            ].join('\n');

            core.setOutput('content', md);

      - name: Write content file
        run: |
          printf "%s" "${{ steps.gen.outputs.content }}" > _activity.md

      - name: Debug: show README & marker lines
        shell: bash
        run: |
          echo "----- REF: ${{ github.ref_name }} -----"
          echo "----- README (first 200 lines) -----"
          nl -ba README.md | sed -n '1,200p' || true
          echo "----- Grep markers (tolerant) -----"
          grep -En '<!--[[:space:]]*RECENT_ACTIVITY:start[[:space:]]*-->' README.md || true
          grep -En '<!--[[:space:]]*RECENT_ACTIVITY:end[[:space:]]*-->'   README.md || true

      - name: Update README between markers (tolerant)
        shell: bash
        run: |
          set -euo pipefail
          start='<!--[[:space:]]*RECENT_ACTIVITY:start[[:space:]]*-->'
          end='<!--[[:space:]]*RECENT_ACTIVITY:end[[:space:]]*-->'
          if ! grep -Eq "$start" README.md || ! grep -Eq "$end" README.md; then
            echo "::group::README preview"; nl -ba README.md | sed -n '1,200p'; echo "::endgroup::"
            echo "::error ::README markers not found (check lines, spaces, or code blocks)"; exit 1
          fi
          python3 - <<'PY'
import re,sys
start = r'<!--[ \t]*RECENT_ACTIVITY:start[ \t]*-->'
end   = r'<!--[ \t]*RECENT_ACTIVITY:end[ \t]*-->'
with open("README.md","r",encoding="utf-8") as f:
    txt = f.read()
with open("_activity.md","r",encoding="utf-8") as f:
    content = f.read().rstrip()
if not re.search(start, txt, flags=re.S) or not re.search(end, txt, flags=re.S):
    print("Markers not found", file=sys.stderr); sys.exit(1)
new = re.sub(start + r'.*?' + end, start + '\n' + content + '\n' + end, txt, flags=re.S)
with open("README.md","w",encoding="utf-8") as f:
    f.write(new)
print("README updated between markers.")
PY

      - name: Commit & push changes
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        shell: bash
        run: |
          if git diff --quiet README.md; then
            echo "No README changes"; exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md _activity.md || true
          git commit -m "chore(readme): update recent activity [skip ci]"
          git push "https://${GH_TOKEN}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}
